function [cfg_artifact] = JAI_mergeThArtResults(cfg_artifact1, cfg_artifact2)
% JAI_MERGEARTIFACTRESULTS is a functions which merges two artifact
% specification structures into on common one. These function is useful,
% when e.g. for certain channels (V1, V2) another threshold value has to be
% used.
%
% Use as
%   [cfg_artifact] = JAI_mergeThArtResults(cfg_artifact1, cfg_artifact2)
%
% where the input data elements has to be a result of JAI_AUTOARTIFACT
%
% This function requires the fieldtrip toolbox.
%
% See also JAI_AUTOARTIFACT

% Copyright (C) 2019, Daniel Matthes, MPI CBS

% -------------------------------------------------------------------------
% check input - only threshold artifacts should be merged
% -------------------------------------------------------------------------
if ~isfield(cfg_artifact1.part1.artfctdef, 'threshold') || ...
    ~isfield(cfg_artifact1.part2.artfctdef, 'threshold')
  error('cfg_artifact1 has no threshold artifacts. Nothing to merge.');
end

if ~isfield(cfg_artifact2.part1.artfctdef, 'threshold') || ...
    ~isfield(cfg_artifact2.part2.artfctdef, 'threshold')
  error('cfg_artifact2 has no threshold artifacts. Nothing to merge.');
end

% test if both artifact specification structures were generated by using
% the same dataset
if size(cfg_artifact1.part1.artfctdef.threshold.trl, 1) ~= ...
    size(cfg_artifact2.part1.artfctdef.threshold.trl, 1)
  error(['The input structures have different trl specifications. '...
          'Merging is not possible!']);
end

% -------------------------------------------------------------------------
% merge input structures
% -------------------------------------------------------------------------
cfg_artifact = cfg_artifact1;

cfg_artifact.part1.artfctdef.threshold = removefields( ...
  cfg_artifact.part1.artfctdef.threshold, {'channel', 'range', 'artifact'});

cfg_artifact.part2.artfctdef.threshold = removefields( ...
  cfg_artifact.part2.artfctdef.threshold, {'channel', 'range', 'artifact'}); 

cfg_artifact.part1.artfctdef.threshold.channel1 = ...                       % add both channel specifications
  cfg_artifact1.part1.artfctdef.threshold.channel;
cfg_artifact.part1.artfctdef.threshold.channel2 = ...
  cfg_artifact2.part1.artfctdef.threshold.channel;

cfg_artifact.part2.artfctdef.threshold.channel1 = ...
  cfg_artifact1.part2.artfctdef.threshold.channel;
cfg_artifact.part2.artfctdef.threshold.channel2 = ...
  cfg_artifact2.part2.artfctdef.threshold.channel;

cfg_artifact.part1.artfctdef.threshold.range1 = ...                         % add both range values
  cfg_artifact1.part1.artfctdef.threshold.range;
cfg_artifact.part1.artfctdef.threshold.range2 = ...
  cfg_artifact2.part1.artfctdef.threshold.range;

cfg_artifact.part2.artfctdef.threshold.range1 = ...
  cfg_artifact1.part2.artfctdef.threshold.range;
cfg_artifact.part2.artfctdef.threshold.range2 = ...
  cfg_artifact2.part2.artfctdef.threshold.range;

artPart1 = [ cfg_artifact1.part1.artfctdef.threshold.artifact; ...          % concatenate artifact specifications
  cfg_artifact2.part1.artfctdef.threshold.artifact ];

artPart2 = [ cfg_artifact1.part2.artfctdef.threshold.artifact; ...
  cfg_artifact2.part2.artfctdef.threshold.artifact ];

if ~isempty(artPart1)                                                       % sort values in a ascending order and remove duplicates
  [~,idx] = sort(artPart1(:,1));
  artPart1 = artPart1(idx, :);

  if size(artPart1, 1) > 1
    idx       = [true; sum(diff(artPart1),2) ~= 0];
    artPart1  = artPart1(idx,:);
  end
end

if ~isempty(artPart2)
  [~,idx] = sort(artPart2(:,1));
  artPart2 = artPart2(idx, :);

  if size(artPart2, 1) > 1
    idx       = [true; sum(diff(artPart2),2) ~= 0];
    artPart2  = artPart2(idx,:);
  end
end

cfg_artifact.part1.artfctdef.threshold.artifact = artPart1;
cfg_artifact.part2.artfctdef.threshold.artifact = artPart2;

cfg_artifact.bad1Num = size(...                                             % update numbers of bad channels
                    cfg_artifact.part1.artfctdef.threshold.artifact, 1);

cfg_artifact.bad2Num = size(...
                    cfg_artifact.part2.artfctdef.threshold.artifact, 1);                  
end
